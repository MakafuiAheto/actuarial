# Generated by Django 4.2.4 on 2023-08-05 16:37

from django.conf import settings
import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('created_On', models.DateTimeField(auto_now_add=True)),
                ('modified_On', models.DateTimeField(auto_now=True)),
                ('email_Address', models.EmailField(blank=True, max_length=254, unique=True, validators=[django.core.validators.EmailValidator(message='Invalid Email'), django.core.validators.RegexValidator(code='nomatch', message='Length has to be 8', regex='^.{8}$')])),
                ('first_Name', models.CharField(max_length=254, verbose_name='First Name')),
                ('last_Name', models.CharField(max_length=254, verbose_name='last Name')),
                ('user_Name', models.CharField(max_length=254, verbose_name='User Name')),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('course_ID', models.UUIDField(auto_created=True, editable=False, primary_key=True, serialize=False)),
                ('created_On', models.DateTimeField(auto_now_add=True)),
                ('modified_On', models.DateTimeField(auto_now=True)),
                ('course_Name', models.CharField(default='', max_length=200)),
                ('description', models.TextField(max_length=5000)),
                ('specialist_area', models.TextField(choices=[('LI', 'Life Insurance'), ('GI', 'General Insurance'), ('PEN', 'Pensions'), ('HI', 'Health Insurance')], default='')),
                ('upload_Location', django.contrib.gis.db.models.fields.PointField(srid=4326)),
            ],
            options={
                'verbose_name': 'Courses',
                'ordering': ['created_On'],
            },
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, to=settings.AUTH_USER_MODEL)),
                ('author_ID', models.UUIDField(auto_created=True, editable=False, primary_key=True, serialize=False)),
                ('image', models.ImageField(default='/img.png', upload_to='upload/images')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], default='')),
                ('author_Bio', models.TextField(default='')),
            ],
            options={
                'verbose_name': 'Authors',
            },
            bases=('courses.user',),
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, to=settings.AUTH_USER_MODEL)),
                ('student_ID', models.UUIDField(auto_created=True, editable=False, primary_key=True, serialize=False)),
                ('image', models.ImageField(default='/img.png', upload_to='upload/images')),
                ('gender', models.CharField(choices=[], default='')),
                ('next_Subscription_Payment_Date', models.DateTimeField()),
            ],
            options={
                'abstract': False,
            },
            bases=('courses.user',),
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('video_ID', models.UUIDField(auto_created=True, editable=False, primary_key=True, serialize=False)),
                ('created_On', models.DateTimeField(auto_now_add=True)),
                ('modified_On', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=254, validators=[django.core.validators.RegexValidator(code='nomatch', message='Length has to be 8', regex='^.{8}$')])),
                ('video_URL', models.SlugField()),
                ('video_Description', models.TextField(max_length=500)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_rel', to='courses.course')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Comments',
            fields=[
                ('comment_ID', models.UUIDField(auto_created=True, editable=False, primary_key=True, serialize=False)),
                ('created_On', models.DateTimeField(auto_now_add=True)),
                ('modified_On', models.DateTimeField(auto_now=True)),
                ('comment', models.TextField()),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='video_rel', to='courses.video')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='course',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='author_rel', to='courses.author'),
        ),
    ]
